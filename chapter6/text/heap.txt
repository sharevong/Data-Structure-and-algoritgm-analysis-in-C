第六章 优先队列（堆）

6.1
优先队列：插入、删除最小值

6.2
实现优先队列的方法
1、链表：插入O(1)，删除O(N)，表头插入新项，遍历查找最小值删除
2、链表：插入O(N)，删除O(1)，链表有序，插入时排序，删除表头
3、二叉查找树：插入O(logN)，删除O(logN)

6.3
二叉堆实现优先队列
堆：完全二叉树（树叶可能不完全，内部节点完全）
堆可以用数组表示，不需要指针
		  A
	    /   \
	   B     C				0 1 2 3 4 5 6 7 8 9 10 11 12 13
	 /  \   / \      --->     A B C D E F G H I J
	D    E  F  G
   / \  /
  H  I J
对于数组中位置为i的元素，它的左儿子在2i，右儿子在2i+1，它的父节点在floor(i/2) = i/2

最小堆：每个节点的值小于或等于它的两个儿子的值
最小值为堆的根节点
插入：在数组的下一个空位置插入，如果不满足大于等于其父节点值的要求，则需要与父节点值进行交换
	  重复这个过程一直到插入所在位置的父节点值小于等于其值或者到根节点为止
	  while( i = ++size;elements[i/2] < x;i /= 2 )  elements[i] = elements[i/2] ;
	  elements[i] = x ;
	  由于可能遍历到根节点，i变成1，因此在数组0(1/2=0)位置处放置一个最小值（小于任何值的值），使得循环在遍历到根节点时能够退出
	  也可以在循环中判断i值是否为1检查遍历根节点，但使用0位置效率更高，消除每次循环都需要判断的缺点
	  上滤
删除：删除根节点后，将最后一个值放入根节点，如果不满足父节点的值小于等于两个子节点的值，则将父节点与值较小的儿子交换
      重复这个过程直到遍历到正确的位置或者树叶节点为止
	  while( i = 1;i*2 <= size;i++ ) 
	  {
		if( LastElement > elements[i] )      // LastElement 数组最后一个元素
			elements[i] = elements[Child] ;  // Child，2i 2i+1两个儿子中较小的一个，注意判断数组下标是否越界
		else
			break ;
	  }
	  elements[i] = LastElement ;
	  下滤
	  
堆的其他操作：
降低某个节点关键字的值：DecreaseKey( P, Delta, H )，减少值后上滤
增加某个节点关键字的值：IncreaseKey( P, Delta, H )，增加值后下滤
删除某个节点：将节点的值减少到比根节点还小（上滤到根节点），再删除 DecreaseKey( P, Delta, H ), DeleteMin( H ) 
使用N个值构建堆：BuildHeap( N, H ) 随机排列N个值，然后从N/2位置开始到0执行下滤（树叶节点的个数占用N/2个位置，树叶节点不需要下滤）

6.4
优先队列的应用
1、找出数组中第k小的值：使用BuildHeap( N, H )构造堆后，执行k次DeleteMin( H )返回值即为第k小的值
   当k=N时，即已完成排序，堆排序  O( NlogN )
2、找出数组中第k大的值：读入k个值后，构造堆，后面的值与堆的根节点值比较并更新，最后堆的根节点的值为第k大的值
3、模拟事件

6.5
d-堆：节点含有d个儿子的堆，二叉堆即2-堆

6.6
零路径长：节点到一个只有一个儿子的节点或树叶节点的最短路径长
左式堆：堆中每个节点的左儿子零路径长大于等于右儿子零路径长，偏向于增加左儿子深度
合并：两个左式堆合并为一个左式堆，插入可以看作是其中一个左式堆为单节点的特殊合并操作
	  算法：找到根节点值较大的左式堆H2，递归合并H2和H1的右子树成为一个新的左式堆H3
			然后将H3作为H1的右子树，如果根节点不满足左儿子零路径长大于等于右儿子零路径长，
			则交换左右儿子，并更新零路径长
注意：合并后，新堆使用原堆的节点，不应该再使用原堆进行操作
