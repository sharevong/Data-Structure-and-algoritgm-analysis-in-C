第五章 散列

5.1
散列：以常数时间执行插入、删除、查找的技术
散列函数：将关键字映射到一个数的函数
冲突：两个关键字散列到同一个值

5.2
关键字一般是字符串

typedef unsigned int Index ;
简单的散列函数，将字符串中所有字符的ascii码值相加，对数组大小求模
Index Hash( const char* Key, int TableSize )
{
	unsigned int HashVal = 0 ;
	while( *Key != '\0' )
		HashVal += *Key++ ;
	return HashVal % TableSize ;
}

使用数字27（英文字母加空格的字符数），关键字至少两个字符
Index Hash( const char* Key, int TableSize )
{
	return ( Key[0] + 27 * Key[1] + 27 * 27 * Key[2] )
			% TableSize ;
}

使用数字32（32代替27是因为32可以使用移位运算，加快速度）
Index Hash( const char* Key, int TableSize )
{
	unsigned int HashVal = 0 ;
	while( *Key != '\0' )
		HashVal = ( HashVal << 5 ) + *Key++ ;
	return HashVal % TableSize ;
}

5.3
分离链接法：将散列到同一值的关键字保留到表中
装填因子：散列表的元素个数与散列表大小的比值
对于分离链接法，装填因子为1最好（每个散列值链表只有一个元素）

5.4
开放定址法：如果有冲突发生，尝试选择另外的位置
对于开放定址法，装填因子应小于0.5
hi(x) = ( Hash(x) + F(i) ) mod TableSize ;

线性探测法：F(i)是i的线性函数，如F(i) = i，逐步探测每个单元直到找到空单元
			一次聚集问题
平方探测法：F(i)是i的二次函数，如F(i) = i^2
			如果表有一半以上的位置被填满，插入可能失败
			二次聚集问题
开放定址法不能直接删除，只能懒惰删除

双散列：出现冲突时，使用第二个散列函数 F(i) = i * hash2( x )
		hash2(x) = R - X mod R, R为小于TableSize的质数

5.5
再散列：当散列表太满时，新建更大的表，并将原表的关键字重新散列到新表中
再散列策略：1、当表满一半时再散列
		    2、当插入失败时再散列
			3、设置装填因子，达到装填因子时再散列（推荐）

5.6
可扩散列：使用B树存储散列值减少磁盘访问次数（当数据量太大不能放入内存时）
当一片树叶存储的关键字太多时，进行分裂，使树的深度不会增大，从而减少磁盘访问次数
当存在过多重复关键字时，需要另外做处理